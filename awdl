#!/usr/bin/env bash

# AWDL Command Line Tool
# A local tool to manage Apple Wireless Direct Link (AWDL) interface
# Author: ZiuChen
# Version: 1.0.0

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DAEMON_SCRIPT="/tmp/awdl_disable_daemon.sh"
PLIST_FILE="/Library/LaunchDaemons/com.awdl.disable.plist"
DAEMON_LABEL="com.awdl.disable"

# Print colored messages
print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if running as root for certain operations
check_sudo() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root directly. It will prompt for sudo when needed."
        exit 1
    fi
}

# Check if AWDL interface exists
check_awdl_interface() {
    if ! ifconfig awdl0 &>/dev/null; then
        print_error "AWDL interface (awdl0) not found. This tool only works on macOS."
        exit 1
    fi
}

# Get AWDL status
get_awdl_status() {
    if ifconfig awdl0 | grep -q "flags=.*<UP"; then
        echo "active"
    else
        echo "inactive"
    fi
}

# Check if daemon is running
is_daemon_running() {
    if sudo launchctl list | grep -q "$DAEMON_LABEL" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Create the daemon script
create_daemon_script() {
    cat > "$DAEMON_SCRIPT" << 'EOF'
#!/usr/bin/env bash

set -euo pipefail

while true; do
    if ifconfig awdl0 | grep -q "flags=.*<UP"; then
        ifconfig awdl0 down 2>/dev/null || true
    fi
    sleep 1
done
EOF
    chmod +x "$DAEMON_SCRIPT"
}

# Create the LaunchDaemon plist
create_plist() {
    sudo tee "$PLIST_FILE" > /dev/null << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>$DAEMON_LABEL</string>
    <key>ProgramArguments</key>
    <array>
        <string>$DAEMON_SCRIPT</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>StandardOutPath</key>
    <string>/tmp/awdl_daemon.log</string>
    <key>StandardErrorPath</key>
    <string>/tmp/awdl_daemon.log</string>
</dict>
</plist>
EOF
}

# Show current status
show_status() {
    print_info "AWDL Status Information"
    echo "======================="
    
    local awdl_status
    awdl_status=$(get_awdl_status)
    
    echo -n "AWDL Interface: "
    if [[ "$awdl_status" == "active" ]]; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
    fi
    
    echo -n "Daemon Status: "
    if is_daemon_running; then
        echo -e "${GREEN}Running${NC}"
        print_info "The daemon is continuously monitoring and disabling AWDL"
    else
        echo -e "${RED}Stopped${NC}"
    fi
    
    echo
    print_info "Interface details:"
    ifconfig awdl0 | head -n 2
}

# Disable AWDL once
disable_once() {
    print_info "Disabling AWDL interface once..."
    
    if [[ "$(get_awdl_status)" == "inactive" ]]; then
        print_warning "AWDL is already inactive"
        return
    fi
    
    if sudo ifconfig awdl0 down; then
        print_success "AWDL interface disabled"
        print_warning "Note: AWDL may be re-enabled automatically by system processes"
        print_info "Use 'awdl disable' to start the daemon for persistent disabling"
    else
        print_error "Failed to disable AWDL interface"
        exit 1
    fi
}

# Enable AWDL
enable_awdl() {
    print_info "Enabling AWDL interface..."
    
    if sudo ifconfig awdl0 up; then
        print_success "AWDL interface enabled"
        print_info "AirDrop and other AWDL services are now available"
    else
        print_error "Failed to enable AWDL interface"
        exit 1
    fi
}

# Start daemon to continuously disable AWDL
start_daemon() {
    print_info "Starting AWDL disable daemon..."
    
    if is_daemon_running; then
        print_warning "Daemon is already running"
        return
    fi
    
    # Create daemon script
    create_daemon_script
    
    # Create plist file
    create_plist
    
    # Load the daemon
    if sudo launchctl load -w "$PLIST_FILE"; then
        print_success "AWDL disable daemon started"
        print_info "The daemon will continuously monitor and disable AWDL"
        print_info "This will persist across reboots"
        print_warning "AirDrop and other AWDL services will be disabled"
    else
        print_error "Failed to start daemon"
        exit 1
    fi
}

# Stop daemon
stop_daemon() {
    print_info "Stopping AWDL disable daemon..."
    
    if ! is_daemon_running; then
        print_warning "Daemon is not running"
    else
        # Unload the daemon
        sudo launchctl unload -w "$PLIST_FILE" 2>/dev/null || true
        print_success "AWDL disable daemon stopped"
    fi
    
    # Clean up files
    sudo rm -f "$PLIST_FILE"
    rm -f "$DAEMON_SCRIPT"
    
    # Kill any remaining processes
    sudo pkill -f "$DAEMON_SCRIPT" 2>/dev/null || true
    
    print_success "Cleanup completed"
    print_info "AWDL can now be managed normally by the system"
}

# Show help
show_help() {
    cat << EOF
AWDL Command Line Tool v1.0.0

A tool to manage Apple Wireless Direct Link (AWDL) interface on macOS.
This tool helps resolve WiFi disconnection issues caused by AWDL interference.

USAGE:
    awdl <command>

COMMANDS:
    status      Show current AWDL and daemon status
    disable     Start daemon to continuously disable AWDL (persistent)
    enable      Stop daemon and enable AWDL
    down        Disable AWDL interface once (temporary)
    up          Enable AWDL interface once
    help        Show this help message

EXAMPLES:
    awdl status                # Check current status
    awdl disable              # Start persistent AWDL disabling
    awdl enable               # Re-enable AWDL and stop daemon
    awdl down                 # Temporarily disable AWDL
    awdl up                   # Enable AWDL

NOTES:
    - Disabling AWDL will affect AirDrop, AirPlay, and other Apple services
    - The 'disable' command creates a persistent daemon that survives reboots
    - The 'down' command only disables AWDL temporarily
    - Root privileges are required for most operations

EOF
}

# Main function
main() {
    check_sudo
    check_awdl_interface
    
    case "${1:-}" in
        "status")
            show_status
            ;;
        "disable")
            start_daemon
            ;;
        "enable")
            stop_daemon
            enable_awdl
            ;;
        "down")
            disable_once
            ;;
        "up")
            enable_awdl
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        "")
            print_error "No command specified"
            echo
            show_help
            exit 1
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
